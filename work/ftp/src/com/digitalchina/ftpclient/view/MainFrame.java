package com.digitalchina.ftpclient.view;

 
import com.digitalchina.common.util.PropertiesUtil;
import com.digitalchina.ftpclient.model.bean.FileBean;
import com.digitalchina.ftpclient.view.components.MyListCellRender;
import com.digitalchina.ftpclient.controller.Controller;
import com.digitalchina.ftpclient.model.Model;
import com.digitalchina.ftpclient.model.bean.FtpInfoBean;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.plaf.basic.BasicListUI.ListSelectionHandler;
/**
* 类描述：程序主Frame
* 创建人：luo
* 创建时间：2014-7-8
* @version    
*/

public class MainFrame extends javax.swing.JFrame {

	private Model model;
	private Controller controller;

	public MainFrame(Model model, Controller controller) {
		this.model = model;
		this.controller = controller;
		initComponents();
		initListener();
		initData();
		setLocationRelativeTo(null);
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	//GEN-BEGIN:initComponents
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

		loginRemoteDialog1 = new com.digitalchina.ftpclient.view.loginFtp(); 
		jScrollPane1 = new javax.swing.JScrollPane();
		logTextArea = new javax.swing.JTextArea();
		localFilePanel = new com.digitalchina.ftpclient.view.LeftPanel(this.model);
		remoteFilePanel = new com.digitalchina.ftpclient.view.RightPanel();
		jLabel1 = new javax.swing.JLabel();
		logClearButton = new javax.swing.JButton();

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		setTitle("FTP\u4e0a\u4f20\u52a0\u5bc6\u5ba2\u6237\u7aef");

		logTextArea.setColumns(20);
		logTextArea.setEditable(false);
		logTextArea.setRows(5);
		jScrollPane1.setViewportView(logTextArea);

		localFilePanel.setBackground(new java.awt.Color(204, 204, 204));

		remoteFilePanel.setBackground(new java.awt.Color(204, 204, 204));

		jLabel1.setText("\u64cd\u4f5c\u8bb0\u5f55:");

		logClearButton.setText("\u6e05\u9664\u8bb0\u5f55");

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(
				getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						javax.swing.GroupLayout.Alignment.TRAILING,
						layout.createSequentialGroup()
								.addContainerGap()
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.LEADING)
												.addComponent(
														jScrollPane1,
														javax.swing.GroupLayout.Alignment.TRAILING,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														718, Short.MAX_VALUE)
												.addGroup(
														javax.swing.GroupLayout.Alignment.TRAILING,
														layout.createSequentialGroup()
																.addComponent(
																		localFilePanel,
																		javax.swing.GroupLayout.DEFAULT_SIZE,
																		354,
																		Short.MAX_VALUE)
																.addPreferredGap(
																		javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
																.addComponent(
																		remoteFilePanel,
																		javax.swing.GroupLayout.DEFAULT_SIZE,
																		352,
																		Short.MAX_VALUE))
												.addGroup(
														layout.createSequentialGroup()
																.addComponent(
																		jLabel1)
																.addPreferredGap(
																		javax.swing.LayoutStyle.ComponentPlacement.RELATED,
																		586,
																		Short.MAX_VALUE)
																.addComponent(
																		logClearButton)))
								.addContainerGap()));
		layout.setVerticalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						layout.createSequentialGroup()
								.addContainerGap()
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.LEADING)
												.addComponent(
														remoteFilePanel,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														306, Short.MAX_VALUE)
												.addComponent(
														localFilePanel,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														306, Short.MAX_VALUE))
								.addGap(11, 11, 11)
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(jLabel1)
												.addComponent(logClearButton))
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(jScrollPane1,
										javax.swing.GroupLayout.DEFAULT_SIZE,
										66, Short.MAX_VALUE).addContainerGap()));

		pack();
	}// </editor-fold>
	//GEN-END:initComponents
	//GEN-BEGIN:variables
	// Variables declaration - do not modify

	private javax.swing.JLabel jLabel1;
	private javax.swing.JScrollPane jScrollPane1;
	private com.digitalchina.ftpclient.view.LeftPanel localFilePanel;
	private javax.swing.JButton logClearButton;
	private javax.swing.JTextArea logTextArea;
	//private com.exercise.view.LoginRemoteDialog loginRemoteDialog1;
	private com.digitalchina.ftpclient.view.loginFtp loginRemoteDialog1;
	private com.digitalchina.ftpclient.view.RightPanel remoteFilePanel;

	// End of variables declaration//GEN-END:variables

	//数据初始化
	private void initData() {
		//设置自定义cellRender类
		localFilePanel.getLocalFileList().setCellRenderer(
				new MyListCellRender());
		remoteFilePanel.getRemoteFileList().setCellRenderer(
				new MyListCellRender());
		//初始化 JList 数据
		controller.refreshLocalFiles(null);
		controller.initRemoteFiles();
	}

	//初始化 Listener
	private void initListener() {
		//监听模型类的属性变化，做相应视图更新
		this.model.addPropertyChangeListener(new PropertyChangeListener() {

			@Override
			public void propertyChange(PropertyChangeEvent evt) {
				if (evt.getPropertyName().equals("localFiles")) {
					//更新本地文件列表
					localFilePanel.getLocalFileList().setListData(model.getLocalFiles());
				} else if (evt.getPropertyName().equals("localPath")) {
					//更新本地文件路径
					localFilePanel.getLocalPathText().setText(model.getLocalPath());
				} else if (evt.getPropertyName().equals("remoteFiles")) {
					//更新服务器文件列表
					remoteFilePanel.getRemoteFileList().setListData(model.getRemoteFiles());
				} else if (evt.getPropertyName().equals("remotePath")) {
					remoteFilePanel.getRemotePathText().setText(model.getRemotePath());
				} else if (evt.getPropertyName().equals("lastLogInfo")) {
					String oldValue = logTextArea.getText();
					logTextArea.setText(oldValue + model.getLastLogInfo()+ "\n");
				}
			}
		});
		//本地文件向上按钮
		localFilePanel.getLocalUpperButton().addActionListener(
				new ActionListener() {

					@Override
					public void actionPerformed(ActionEvent e) {
						controller.localUpperButtonClickHandler();//路径向上                
					}
				});
		//本地文件 JList 鼠标双击的事件处理方法
		localFilePanel.getLocalFileList().addMouseListener(new MouseAdapter() {

			@Override
			public void mouseClicked(MouseEvent e) {
				if (e.getClickCount() == 2) {
					FileBean fb = (FileBean) localFilePanel.getLocalFileList().getSelectedValue();
					if (fb.getType().equals(FileBean.FileType.file)) {
						if (model.isUploadNeedConfirm()) {
							//弹出框确认操作
							int result = JOptionPane.showConfirmDialog(null,
									"确认要上传文件\n" + fb.getDisplayString(), "提示",
									JOptionPane.OK_CANCEL_OPTION);
							if (result == JOptionPane.OK_OPTION) {
								String uploadResult = controller.uploadLocalFile(fb);//上传文件 
								if (uploadResult.equals("OK")) {
									JOptionPane.showMessageDialog(null,
											"上传文件成功：" + fb.getName(), "提示",
											JOptionPane.INFORMATION_MESSAGE);
									
								} else {
									JOptionPane.showMessageDialog(null,
											uploadResult, "提示",
											JOptionPane.WARNING_MESSAGE);
								}
							}
						} else {
							controller.uploadLocalFile(fb);//上传文件                            
						}
					} else if (fb.getType().equals(FileBean.FileType.folder)) {
						controller.openLocalFolder(fb);//打开文件夹
					}
				}
			}
		});
		//本地文件 点击刷新按钮的事件处理
		localFilePanel.getRefreshLocalButton().addActionListener(
				new ActionListener() {

					@Override
					public void actionPerformed(ActionEvent e) {
						controller.refreshLocalButtonClickHandler();
					}
				});
		//点击服务器建立连接按钮
		remoteFilePanel.getRemoteConnectButton().addActionListener(
				new ActionListener() {

					@Override
					public void actionPerformed(ActionEvent e) {
						//读取配置文件中的FTP数据
                       // loginRemoteDialog1.getjTextField1().setText(PropertiesUtil.getValueBykey("ftpIP"));//ip地址
						//loginRemoteDialog1.getjTextField2().setText(PropertiesUtil.getValueBykey("ftpPort"));//端口
						loginRemoteDialog1.getjTextField3().setText(PropertiesUtil.getValueBykey("ftpUser"));//用户名
						loginRemoteDialog1.getjPasswordField1().setText(PropertiesUtil.getValueBykey("ftpPassword"));//密码
					
						loginRemoteDialog1.setVisible(true);//显示用户登录框               
					}
				});
		//登陆服务器 Dialog 点击提交按钮
		loginRemoteDialog1.getjButton1().addActionListener(
				new ActionListener() {

					@Override
					public void actionPerformed(ActionEvent e) {
		 				
						String ip = PropertiesUtil.getValueBykey("ftpIP");//ip地址
						String ports = PropertiesUtil.getValueBykey("ftpPort");//端口
						String username = loginRemoteDialog1.getjTextField3().getText().trim();//用户名
						String password = loginRemoteDialog1.getjPasswordField1().getText().trim();//密码
						
						//FtpInfoBean ftpInfoBean = new FtpInfoBean(ip, username,password);//封装bean
						int port=21;
						if(!"".equals(ports))
							port=Integer.parseInt(ports); 
						FtpInfoBean ftpInfoBean = new FtpInfoBean(ip, username,password,port);//封装bean
						
						loginRemoteDialog1.setVisible(false); 
						controller.loginRemoteServer(ftpInfoBean);    
						
						controller.refreshRemoteFiles();
						 
					}
				});
		//服务器文件 点击刷新按钮的事件处理
		remoteFilePanel.getRefreshRemoteButton().addActionListener(
				new ActionListener() {

					@Override
					public void actionPerformed(ActionEvent e) {
						controller.refreshRemoteFiles();
					}
				});
		//服务器 JList 鼠标双击的事件处理方法
		remoteFilePanel.getRemoteFileList().addMouseListener(
				new MouseAdapter() {

					@Override
					public void mouseClicked(MouseEvent e) {
						if (e.getClickCount() == 2) {
							FileBean fb = (FileBean) remoteFilePanel
									.getRemoteFileList().getSelectedValue();
							controller.remoteFileDoubleClickedHandler(fb);
						}
					}
				});
		//点击服务器文件列表的向上按钮
		remoteFilePanel.getRemoteUpperButton().addActionListener(
				new ActionListener() {

					@Override
					public void actionPerformed(ActionEvent e) {
						controller.remoteUpperButtonClickHandler();//文件路径向上                
					}
				});
		//点击断开 服务器连接 按钮
		remoteFilePanel.getRemoteDisconnectButton().addActionListener(
				new ActionListener() {

					@Override
					public void actionPerformed(ActionEvent e) {
						controller.remoteDisconnectButtonClickHandler();
					}
				});
		//点击清除记录按钮
		logClearButton.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				logTextArea.setText("");//清空操作记录文本
			}
		});
		//本地文件 选中
		localFilePanel.getLocalFileList().addListSelectionListener(
				new ListSelectionListener() {

					@Override
					public void valueChanged(ListSelectionEvent e) {
						int selected = localFilePanel.getLocalFileList()
								.getSelectedIndex();
						remoteFilePanel.getRemoteFileList().clearSelection();
						localFilePanel.getLocalFileList().setSelectedIndex(
								selected);
					}
				});
		//服务器文件 选中
		remoteFilePanel.getRemoteFileList().addListSelectionListener(
				new ListSelectionListener() {

					@Override
					public void valueChanged(ListSelectionEvent e) {
						int selected = remoteFilePanel.getRemoteFileList()
								.getSelectedIndex();
						localFilePanel.getLocalFileList().clearSelection();
						remoteFilePanel.getRemoteFileList().setSelectedIndex(
								selected);
					}
				});
		//点击服务器文件删除按钮
		remoteFilePanel.getDeleteRemoteButton().addActionListener(
				new ActionListener() {

					@Override
					public void actionPerformed(ActionEvent e) {
						FileBean fb = (FileBean) remoteFilePanel
								.getRemoteFileList().getSelectedValue();
						if (model.getFtpInfoBean() == null) {
							return;//未登录ftp服务器，直接返回。
						}
						//弹出框确认操作
						int result = JOptionPane.showConfirmDialog(null,
								"确认要删除\n" + fb.getDisplayString(), "提示",
								JOptionPane.OK_CANCEL_OPTION);
						if (result == JOptionPane.OK_OPTION) {
							controller.deleteSeletedRemoteFile(fb);//删除文件                                               
						}
					}
				});
		//服务器文件 delete键
		remoteFilePanel.getRemoteFileList().addKeyListener(new KeyAdapter() {

			@Override
			public void keyPressed(KeyEvent e) {
				if (e.getKeyCode() == KeyEvent.VK_DELETE) {
					FileBean fb = (FileBean) remoteFilePanel
							.getRemoteFileList().getSelectedValue();
					if (model.getFtpInfoBean() == null) {
						return;//未登录ftp服务器，直接返回。
					}
					//弹出框确认操作
					int result = JOptionPane.showConfirmDialog(null, "确认要删除\n"
							+ fb.getDisplayString(), "提示",
							JOptionPane.OK_CANCEL_OPTION);
					if (result == JOptionPane.OK_OPTION) {
						controller.deleteSeletedRemoteFile(fb);//删除文件                                               
					}
				}
			}
		});

	}
}
